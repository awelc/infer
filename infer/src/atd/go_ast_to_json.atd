type object_type =
	[ FuncDecl of func_decl_type
	| FuncDeclRef of int
	| Field of field_type	
	| FieldRef of int
	| ValueSpec of value_spec_type
	| ValueSpecRef of int ]

type ident_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	id <json name="Id"> : string;
	?obj <json name="Object"> : object_type option;
}

type star_expr_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	x <json name="X"> : expr_type;
}

type unary_expr_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	op <json name="Op"> : string;
	x <json name="X"> : expr_type;
}

type binary_expr_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	op <json name="Op"> : string;
	x <json name="X"> : expr_type;
	y <json name="Y"> : expr_type;
}

type basic_lit_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	kind <json name="Kind"> : string;
	value <json name="Value"> : string;		
}

type call_expr_type = {
	lparen <json name="LParen"> : pos_type;
	rparen <json name="RParen"> : pos_type;
	fn <json name="Fun"> : expr_type;
	args <json name="Args"> : expr_type list;
}

type expr_type = 
	[ Ident of ident_type
	| StarExpr of star_expr_type 
	| UnaryExpr of unary_expr_type 
	| BinaryExpr of binary_expr_type 
	| BasicLit of basic_lit_type
	| CallExpr of call_expr_type ]

type value_spec_type = {
	uid <json name="Uid"> : int;
	t <json name="Type"> : expr_type;
	names <json name="Names"> : ident_type list;
	values <json name="Values"> : expr_type list;
}

type spec_type =
	[ValueSpec of value_spec_type]

type gen_decl_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	tok <json name="Tok"> : string;
	specs <json name="Specs"> : spec_type list;
}

type func_decl_type = {
	uid <json name="Uid"> : int;
	name <json name="Name"> : ident_type;
	func_type <json name="FuncType"> : func_type_type;
	body <json name="Body"> : block_stmt_type;
}

type decl_type = 
	[ GenDecl of gen_decl_type
	| FuncDecl of func_decl_type
	| FuncDeclRef of int ]

type decl_stmt_type = {
	decl <json name="Decl"> : decl_type;
}

type return_stmt_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	results <json name="Results"> : expr_type list;
}

type assign_stmt_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	lhs <json name="Lhs"> : expr_type list;
	rhs <json name="Rhs"> : expr_type list;
}

type stmt_type =
	[ DeclStmt of decl_stmt_type
	| ReturnStmt of return_stmt_type 
	| AssignStmt of assign_stmt_type
	| BlockStmt of block_stmt_type
	| IfStmt of if_stmt_type ]

type field_type = {
	uid <json name="Uid"> : int;
	names <json name="Names"> : ident_type list;
    t <json name="Type"> : expr_type;
}

type field_list_el_type =
	[ Field of field_type ]

type func_type_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
    params <json name="Params"> : field_list_el_type list;
    results <json name="Results"> : field_list_el_type list;
}

type pos_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;	
}

type block_stmt_type = {
	lbrace <json name="LBrace"> : pos_type;
	rbrace <json name="RBrace"> : pos_type;
	stmts <json name="StmtList"> : stmt_type list;
}

type if_stmt_type = {
	ln <json name="Ln"> : int;
	col <json name="Col"> : int;
	cond <json name="Cond"> : expr_type;
	body <json name="Body"> : block_stmt_type;
	?el <json name="Else"> : stmt_type option;
}

type file_type = {
	decls <json name="Decls"> : decl_type list;
}
